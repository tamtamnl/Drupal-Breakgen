<?php

/**
 * @file
 * Breakgen responsive_image extension file.
 *
 * Breakgen responsive image file. In charge of creating
 * responsive images for responsive_image module that are related to breakgen
 * image style mapping.
 */

use Drupal\responsive_image\Entity\ResponsiveImageStyle;

/**
 * Listen to breakgen generation and create responsive image styles accordingly.
 *
 * @param string $key
 *   Breakgen configuration key.
 * @param \Drupal\breakpoint\BreakpointInterface $breakpoint
 *   Breakpoint Interface of plugin.
 * @param array $breakgen
 *   Breakgen configuration from breakgen theme file.
 */
function breakgen_responsive_image_breakgen_post_save_image_styles(
  $key,
  &$breakpoint,
  array &$breakgen
) {
  foreach ($breakgen as $groupName => $breakgenGroupConfiguration) {
    if ($breakgenGroupConfiguration['responsive_image'] === TRUE) {
      $isFallback = (isset($breakgenGroupConfiguration['responsive_image_fallback']) &&
        $breakgenGroupConfiguration['responsive_image_fallback'] === TRUE);

      $imageStyleMachineName = $key . '_breakgen_' . $groupName;
      // Ensure correct imageStyle machine name
      $imageStyleMachineName = str_replace('.','_', $imageStyleMachineName);

      // Set correct breakpoint group
      $breakpointGroup = strtok($key,'.');
      breakgen_responsive_image_merge($imageStyleMachineName, $groupName, $isFallback, $breakpointGroup);

      // Generate deviation of image by percentage.
      if (isset($breakgenGroupConfiguration['percentages'])) {
        foreach ($breakgenGroupConfiguration['percentages'] as $percentage) {
          $imageStyleMachineName = str_replace('.', '_', $key) . '.' . str_replace('%', '', $percentage)
            . '_breakgen_' . $groupName;
          $deviationGroupName = $groupName . '_' . str_replace('%', '', $percentage);
          breakgen_responsive_image_merge($imageStyleMachineName, $deviationGroupName, $isFallback, $breakpointGroup);
        }
      }
    }
  }
}

/**
 * Add information to existing image style or create image style.
 *
 * @param string $imageStyleMachineName
 *   Machine name of a image style.
 * @param string $groupName
 *   Breakgen group name.
 * @param bool $isFallback
 *   Whether or not $imageStyleMachineName is also the fallback image.
 */
function breakgen_responsive_image_merge(
  $imageStyleMachineName,
  $groupName,
  $isFallback,
  $breakpointGroup = 'responsive_image'
) {
  $machineName = 'breakgen_responsive_image_' . $groupName;
  $fallbackMachineName = '_original image_';

  if ($isFallback) {
    $fallbackMachineName = $imageStyleMachineName;
  }

  $responsiveImageStyle = ResponsiveImageStyle::load($machineName);

  if ($responsiveImageStyle === NULL) {
    breakgen_responsive_image_create($machineName, $groupName, $imageStyleMachineName, $fallbackMachineName, $breakpointGroup);
  }
  else {
    $imageStyleMappings = $responsiveImageStyle->get('image_style_mappings');
    $imageStyleMappings[0]['image_mapping']['sizes_image_styles'][] = $imageStyleMachineName;
    $responsiveImageStyle->set('image_style_mappings', $imageStyleMappings);
    if ($fallbackMachineName !== '_original image_') {
      $responsiveImageStyle->set('fallback_image_style', $fallbackMachineName);
    }
    $responsiveImageStyle->save();
  }
}

/**
 * Create base responsive image style.
 *
 * @param string $machineName
 *   Machine name of the responsive image style.
 * @param string $groupName
 *   Breakgen group name.
 * @param string $imageStyleMachineName
 *   Machine name of a image style to add to the responsive image style.
 * @param string $fallbackMachineName
 *   Machine name for the fallback image.
 * @param string $breakpointGroup
 *  Breakpoint group
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function breakgen_responsive_image_create(
  $machineName,
  $groupName,
  $imageStyleMachineName,
  $fallbackMachineName,
  $breakpointGroup
) {
  $label = str_replace('.', ' ', str_replace('_', ' ', $groupName));
  $responsiveImageStyle = ResponsiveImageStyle::create([
    'id'                   => $machineName,
    'label'                => "Breakgen: " . $label,
    'breakpoint_group'     => $breakpointGroup,
    'image_style_mappings' => [
      [
        'breakpoint_id'      => $breakpointGroup.'.viewport_sizing',
        'multiplier'         => '1x',
        'image_mapping_type' => 'sizes',
        'image_mapping'      => [
          'sizes'              => '100 vw',
          'sizes_image_styles' => [
            $imageStyleMachineName,
          ],
        ],
      ],
    ],
    'fallback_image_style' => $fallbackMachineName,
  ]);
  $responsiveImageStyle->save();
}

/**
 * Clear all generated responsive image styles.
 */
function breakgen_responsive_image_breakgen_pre_clear_image_styles() {
  $imageStyleIds = \Drupal::entityQuery('responsive_image_style')
    ->condition('id', "breakgen_responsive_image_", 'CONTAINS')
    ->execute();

  $responsiveImageStyles = ResponsiveImageStyle::loadMultiple($imageStyleIds);

  \Drupal::entityTypeManager()
    ->getStorage('responsive_image_style')
    ->delete($responsiveImageStyles);
}