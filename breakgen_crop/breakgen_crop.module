<?php

/**
 * @file
 * Breakgen image_widget_crop extension file.
 *
 * Breakgen crop extension file. In charge of creating
 * crop types for image_widget_crop that are related to breakgen
 * image style mapping.
 */

use Drupal\crop\Entity\CropType;

/**
 * Hook into breakgen and create crop types.
 *
 * Hook into breakgen and create crop types defined by the
 * "crop_crop" image style of the Image Widget Module.
 *
 * @param array $effectConfiguration
 *   Configuration of the style effect.
 *
 * @internal param \Drupal\image\Entity\ImageStyle $imageStyle
 */
function breakgen_crop_breakgen_image_style_effect_alter(
  array &$effectConfiguration
) {
  if ($effectConfiguration['id'] === 'crop_crop') {
    // Build crop id, convert crop ID from ":" to "x" because configuration
    // names do not support the ":" character.
    $cropId = str_replace(':', 'x', $effectConfiguration['data']['crop_type']);
    $cropId = "breakgen_crop_$cropId";

    // Get the crop type.
    $cropTypeIds = \Drupal::entityQuery('crop_type')
      ->condition('id', $cropId)
      ->execute();

      if (empty($cropTypeIds)) {
          $cropType = null;
      } else {
          $cropType = CropType::load(current($cropTypeIds));
      }

    // If the type exists, don't create a new one. But set the modified ID.
    if ($cropType !== NULL) {
      $effectConfiguration['data']['crop_type'] = $cropId;
      return;
    }

    // Create crop type.
    $cropType = CropType::create([
      'aspect_ratio' => $effectConfiguration['data']['crop_type'],
      'id'           => $cropId,
      'label'        => "Breakgen Crop: " . $cropId,
      'description'  => t('DO NOT DELETE, Crop type created for the breakgen module.'),
    ]);
    $cropType->save();

    // Alter the effect configuration.
    $effectConfiguration['data']['crop_type'] = $cropId;
  }
}

/**
 * Clear all generated crop types.
 */
function breakgen_crop_breakgen_pre_clear_image_styles() {
  $cropTypeIds = \Drupal::entityQuery('crop_type')
    ->condition('id', "breakgen_crop_", 'CONTAINS')
    ->execute();

  $cropTypes = CropType::loadMultiple($cropTypeIds);

  \Drupal::entityTypeManager()->getStorage('crop_type')->delete($cropTypes);
}